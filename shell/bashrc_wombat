#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# ==== Environment Variables ====
export XDG_CONFIG_HOME=~/.config/
export XDG_DATA_HOME=~/.local/share/
export CUSTOM_CONFIG_HOME=/fileserver/fastscratch/liam/configs
export WORKINGDIR=/fileserver/fastscratch/liam
export EDITOR=nvim

# ==== Sources ====
# source $CUSTOM_CONFIG_HOME/shell/bashrc_aliases
source $CUSTOM_CONFIG_HOME/shell/paths
. "${FSLDIR}/etc/fslconf/fsl.sh"
. "$HOME/.cargo/env"

# ==== Program Tweaks ====
# Stop nested Ranger
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        /usr/bin/ranger "$@"
    else
        exit
    fi
}
# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
# cribbed from connor mcd (nixcast)
bind '"\C-o": "fo\n"'
bind '"\C-]": "fcd\n"'
bind '"\C-e": "fe\n"'

fcd() {
    cd "$(fd -t d | fzf --height 40% --layout=reverse --preview="ls {}")"
    ls
}

fo() {
    fd -d 2 -t f | fzf -m | xargs -r -d "\n" xdg-open 2>&-
}

fe() {
    $EDITOR $(fd -d 2 -t f | fzf --layout=reverse -m)
}
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# ==== Aliases ====
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
alias cdw='cd ${WORKINGDIR}'
alias e='$EDITOR'
alias tm='tmux attach || tmux'
alias b='batcat'
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
# ubuntu 22.04 and earlier conflict with fd
type -P "fdfind" > /dev/null && alias fd="fdfind" 

# ==== Shell Options ====
shopt -s autocd
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=20000000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# Switch to Vi style key bindings
set -o vi
bind -m vi-insert 'Control-l: clear-screen'

# enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# ==== Other Sources ====
# source $CUSTOM_CONFIG_HOME/shell/bashrc_arch
source /usr/share/doc/fzf/examples/key-bindings.bash

# ==== Prompt ====
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi
if [ "$color_prompt" = yes ]; then
    PS1='\[\033[38;5;2m\]\w\[$(tput sgr0)\]\[\033[38;5;15m\]\[$(tput sgr0)\]\[\033[38;5;8m\]$(__git_ps1 "[%s]")\[\033[38;5;14m\]\$\[$(tput sgr0)\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt


# ==== things added automatically ==== 
# ==== below this line  these were added by programs ====
export NVM_DIR="$HOME/.config//nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/ch243636/anaconda3/bin/conda' 'shell.bash' 'hook' 2>/dev/null)"
if [ $? -eq 0 ]; then
	eval "$__conda_setup"
else
	if [ -f "/home/ch243636/anaconda3/etc/profile.d/conda.sh" ]; then
		. "/home/ch243636/anaconda3/etc/profile.d/conda.sh"
	else
		export PATH="/home/ch243636/anaconda3/bin:$PATH"
	fi
fi
unset __conda_setup
# <<< conda initialize <<<

# pre-crash paths
# export PATH=/opt/matlab/current/bin:${PATH}
# export PATH=/opt/x86_64/pkgs/itksnap/itksnap-3.6.0-rc1-20161029-Linux-x86_64/bin/:${PATH}
