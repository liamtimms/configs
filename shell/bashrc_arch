#
# ~/.bashrc
#
export XDG_CONFIG_HOME=~/.config/

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

shopt -s autocd

# Stop nested Ranger
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        /usr/bin/ranger "$@"
    else
        exit
    fi
}

export EDITOR=nvim

alias ls='ls --color=auto'
alias tmn='tmux new-session -s'
alias t='tree'
# alias r='ranger'
alias e='$EDITOR'
alias nc='nipypecli crash'
alias tc='trash crash*'
alias cu='checkupdates | grep -v hask | wc -l'
alias tm='tmux attach || tmux'

joshuto-cd() {
  ID="$$"
  mkdir -p /tmp/$USER
  OUTPUT_FILE="/tmp/$USER/joshuto-cwd-$ID"
  env joshuto --output-file "$OUTPUT_FILE" $@
  exit_code=$?

  case "$exit_code" in
    # regular exit
    0)
      ;;
    # output contains current directory
    101)
      JOSHUTO_CWD=$(cat "$OUTPUT_FILE")
      cd "$JOSHUTO_CWD"
      ;;
    # output selected files
    102)
      cat "$OUTPUT_FILE"
      ;;
    *)
      echo "Exit code: $exit_code"
      ;;
  esac
}

alias j='joshuto-cd'

# widget-joshuto-cd() {
#   BUFFER="joshuto-cd"
#   zle accept-line
# }
# zle -N widget-joshuto-cd
#
#
# bind '"\C-o": "fo\n"'
#


WORKINGDIR=~/Documents/Research
alias cdw='cd ${WORKINGDIR}'

alias vmtk_env='source ~/bin/anaconda/bin/activate vmtk'

# GIT
source /usr/share/git/completion/git-prompt.sh
source /usr/share/git/completion/git-completion.bash

# FZF:
source /usr/share/fzf/key-bindings.bash
source /usr/share/fzf/completion.bash
# export FZF_DEFAULT_OPTS='--no-height --reverse'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# trash-cli:
source /usr/share/bash-completion/completions/trash
source /usr/share/bash-completion/completions/trash-empty
source /usr/share/bash-completion/completions/trash-list
source /usr/share/bash-completion/completions/trash-put
source /usr/share/bash-completion/completions/trash-restore

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
# force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1='\[\033[38;5;2m\]\w\[$(tput sgr0)\]\[\033[38;5;15m\]\[$(tput sgr0)\]\[\033[38;5;8m\]$(__git_ps1 "[%s]")\[\033[38;5;14m\]\$\[$(tput sgr0)\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias tm="tmux attach || tmux"

# update alias
alias upd='archupdate'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

## enable pyenv
#export PYENV_ROOT="$HOME/.pyenv"
#export PATH="$HOME/.pyenv/bin:$PATH"
#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"

# custom bash codes are in ~/bin
if [ -d "$HOME/bin/bashscripts" ] ; then
    export PATH="$HOME/bin/bashscripts:$PATH"
fi

export ANTSPATH=/opt/ANTs/bin/
export PATH=${ANTSPATH}:$PATH

# CAVASS
VIEWNIX_ENV=/home/liam/Documents/cavass_test/cavass-build
PATH=$PATH:/home/liam/Documents/cavass_test/cavass-build
export PATH VIEWNIX_ENV

# Switch to Vi style key bindings
set -o vi
bind -m vi-insert 'Control-l: clear-screen'
# .bashrc functions
# cribbed from connor mcd (nixcast)
# cribbed from connor mcd (nixcast)
bind '"\C-o": "fo\n"'
bind '"\C-]": "fcd\n"'
bind '"\C-+": "fe\n"'

fcd() {
    cd "$(fd -t d | fzf --height 40% --layout=reverse --preview="ls {}")"
    ls
}

fo() {
    fd -d 2 -t f | fzf -m | xargs -r -d "\n" xdg-open 2>&-
}

fe() {
    $EDITOR $(fd -d 2 -t f | fzf --layout=reverse -m)
}
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/mri/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/mri/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/mri/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/mri/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# mcfly
source /usr/share/doc/mcfly/mcfly.bash
export MCFLY_KEY_SCHEME=vim
export MCFLY_FUZZY=2
export MCFLY_DISABLE_MENU=TRUE
